import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { DataSource } from 'typeorm';
import * as bcrypt from 'bcrypt';

async function seed() {
  const app = await NestFactory.createApplicationContext(AppModule);
  const dataSource = app.get(DataSource);

  console.log('üå± Iniciando seed de la base de datos...\n');

  try {
    // Limpiar la base de datos
    console.log('üßπ Limpiando base de datos...');
    await dataSource.query('TRUNCATE TABLE "user" CASCADE');
    await dataSource.query('TRUNCATE TABLE "carrera" CASCADE');
    await dataSource.query('TRUNCATE TABLE "plan_estudio" CASCADE');
    await dataSource.query('TRUNCATE TABLE "departamento" CASCADE');
    await dataSource.query('TRUNCATE TABLE "materia" CASCADE');
    await dataSource.query('TRUNCATE TABLE "comision" CASCADE');
    await dataSource.query('TRUNCATE TABLE "horario" CASCADE');

    // Crear usuarios
    console.log('üë§ Creando usuarios...');
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    const adminUser = await dataSource.query(`
      INSERT INTO "user" (nombre, apellido, email, password, legajo, dni, rol)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id
    `, ['Admin', 'Sistema', 'admin@universidad.edu', hashedPassword, 'ADM001', '10000001', 'admin']);

    const profesorUser = await dataSource.query(`
      INSERT INTO "user" (nombre, apellido, email, password, legajo, dni, rol)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id
    `, ['Juan', 'P√©rez', 'profesor@universidad.edu', hashedPassword, 'PROF001', '20000001', 'profesor']);

    const estudianteUser = await dataSource.query(`
      INSERT INTO "user" (nombre, apellido, email, password, legajo, dni, rol)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
      RETURNING id
    `, ['Mar√≠a', 'Gonz√°lez', 'estudiante@universidad.edu', hashedPassword, 'EST001', '30000001', 'estudiante']);

    // Crear m√°s estudiantes
    for (let i = 2; i <= 5; i++) {
      await dataSource.query(`
        INSERT INTO "user" (nombre, apellido, email, password, legajo, dni, rol)
        VALUES ($1, $2, $3, $4, $5, $6, $7)
      `, [`Estudiante${i}`, `Apellido${i}`, `estudiante${i}@universidad.edu`, hashedPassword, `EST00${i}`, `3000000${i}`, 'estudiante']);
    }

    // Crear carreras
    console.log('üéì Creando carreras...');
    const carreraIngenieria = await dataSource.query(`
      INSERT INTO "carrera" (nombre, descripcion)
      VALUES ($1, $2)
      RETURNING id
    `, ['Ingenier√≠a en Sistemas', 'Carrera de grado en Ingenier√≠a en Sistemas de Informaci√≥n']);

    const carreraLicenciatura = await dataSource.query(`
      INSERT INTO "carrera" (nombre, descripcion)
      VALUES ($1, $2)
      RETURNING id
    `, ['Licenciatura en Ciencias de la Computaci√≥n', 'Carrera de grado en Ciencias de la Computaci√≥n']);

    // Crear departamentos
    console.log('üè¢ Creando departamentos...');
    const deptoBasicas = await dataSource.query(`
      INSERT INTO "departamento" (nombre, descripcion)
      VALUES ($1, $2)
      RETURNING id
    `, ['Ciencias B√°sicas', 'Departamento de materias de ciencias b√°sicas']);

    const deptoSistemas = await dataSource.query(`
      INSERT INTO "departamento" (nombre, descripcion)
      VALUES ($1, $2)
      RETURNING id
    `, ['Sistemas', 'Departamento de materias de sistemas y programaci√≥n']);

    const deptoGestion = await dataSource.query(`
      INSERT INTO "departamento" (nombre, descripcion)
      VALUES ($1, $2)
      RETURNING id
    `, ['Gesti√≥n', 'Departamento de materias de gesti√≥n y administraci√≥n']);

    // Crear planes de estudio
    console.log('üìã Creando planes de estudio...');
    const planIngenieria2023 = await dataSource.query(`
      INSERT INTO "plan_estudio" (nombre, descripcion, "a√±o", "carreraId")
      VALUES ($1, $2, $3, $4)
      RETURNING id
    `, ['Plan 2023 - Ingenier√≠a', 'Plan de estudios 2023 para Ingenier√≠a en Sistemas', 2023, carreraIngenieria[0].id]);

    // Crear materias
    console.log('üìö Creando materias...');
    const materias = [
      // Primer a√±o
      { nombre: 'An√°lisis Matem√°tico I', descripcion: 'Introducci√≥n al c√°lculo diferencial e integral', departamento: deptoBasicas[0].id, a√±o: 1, cuatrimestre: 1 },
      { nombre: '√Ålgebra y Geometr√≠a Anal√≠tica', descripcion: 'Fundamentos de √°lgebra lineal y geometr√≠a', departamento: deptoBasicas[0].id, a√±o: 1, cuatrimestre: 1 },
      { nombre: 'Algoritmos y Estructuras de Datos', descripcion: 'Fundamentos de programaci√≥n y estructuras de datos', departamento: deptoSistemas[0].id, a√±o: 1, cuatrimestre: 1 },
      { nombre: 'Arquitectura de Computadoras', descripcion: 'Organizaci√≥n y arquitectura de sistemas computacionales', departamento: deptoSistemas[0].id, a√±o: 1, cuatrimestre: 1 },
      
      { nombre: 'An√°lisis Matem√°tico II', descripcion: 'C√°lculo multivariable y series', departamento: deptoBasicas[0].id, a√±o: 1, cuatrimestre: 2 },
      { nombre: 'F√≠sica I', descripcion: 'Mec√°nica cl√°sica y termodin√°mica', departamento: deptoBasicas[0].id, a√±o: 1, cuatrimestre: 2 },
      { nombre: 'Programaci√≥n Orientada a Objetos', descripcion: 'Paradigma de programaci√≥n orientada a objetos', departamento: deptoSistemas[0].id, a√±o: 1, cuatrimestre: 2 },
      { nombre: 'Sistemas y Organizaciones', descripcion: 'Introducci√≥n a los sistemas y las organizaciones', departamento: deptoGestion[0].id, a√±o: 1, cuatrimestre: 2 },
      
      // Segundo a√±o
      { nombre: 'Probabilidad y Estad√≠stica', descripcion: 'Fundamentos de probabilidad y estad√≠stica', departamento: deptoBasicas[0].id, a√±o: 2, cuatrimestre: 1 },
      { nombre: 'Base de Datos', descripcion: 'Dise√±o y gesti√≥n de bases de datos', departamento: deptoSistemas[0].id, a√±o: 2, cuatrimestre: 1 },
      { nombre: 'Sistemas Operativos', descripcion: 'Fundamentos de sistemas operativos', departamento: deptoSistemas[0].id, a√±o: 2, cuatrimestre: 1 },
      { nombre: 'Ingenier√≠a de Software I', descripcion: 'Introducci√≥n a la ingenier√≠a de software', departamento: deptoSistemas[0].id, a√±o: 2, cuatrimestre: 1 },
    ];

    const materiasCreadas: any[] = [];
    for (const materia of materias) {
      const result = await dataSource.query(`
        INSERT INTO "materia" (nombre, descripcion, "departamentoId")
        VALUES ($1, $2, $3)
        RETURNING id
      `, [materia.nombre, materia.descripcion, materia.departamento]);
      const materiaId = result[0].id;

      // Asociar materia al plan de estudio
      await dataSource.query(`
        INSERT INTO "materia_planes_estudio" ("materiaId", "planEstudioId")
        VALUES ($1, $2)
      `, [materiaId, planIngenieria2023[0].id]);

      materiasCreadas.push({ ...materia, id: materiaId });
    }

    // Crear comisiones
    console.log('üë• Creando comisiones...');
    for (const materia of materiasCreadas.slice(0, 8)) { // Primeras 8 materias (primer a√±o)
      // Comisi√≥n ma√±ana
      const comisionManana = await dataSource.query(`
        INSERT INTO "comision" (nombre, descripcion, "materiaId", "profesorId")
        VALUES ($1, $2, $3, $4)
        RETURNING id
      `, [`${materia.nombre} - Turno Ma√±ana`, 'Comisi√≥n turno ma√±ana', materia.id, profesorUser[0].id]);

      // Comisi√≥n tarde
      const comisionTarde = await dataSource.query(`
        INSERT INTO "comision" (nombre, descripcion, "materiaId", "profesorId")
        VALUES ($1, $2, $3, $4)
        RETURNING id
      `, [`${materia.nombre} - Turno Tarde`, 'Comisi√≥n turno tarde', materia.id, profesorUser[0].id]);

      // Crear horarios para cada comisi√≥n
      const dias = ['lunes', 'miercoles', 'viernes'];
      for (const dia of dias) {
        // Horario ma√±ana
        await dataSource.query(`
          INSERT INTO "horario" (dia, "horaInicio", "horaFin", aula, "comisionId", "materiaId")
          VALUES ($1, $2, $3, $4, $5, $6)
        `, [dia, '08:00', '10:00', `Aula ${Math.floor(Math.random() * 10) + 1}`, comisionManana[0].id, materia.id]);

        // Horario tarde
        await dataSource.query(`
          INSERT INTO "horario" (dia, "horaInicio", "horaFin", aula, "comisionId", "materiaId")
          VALUES ($1, $2, $3, $4, $5, $6)
        `, [dia, '18:00', '20:00', `Aula ${Math.floor(Math.random() * 10) + 11}`, comisionTarde[0].id, materia.id]);
      }
    }

    // Crear correlatividades
    console.log('üîó Creando correlatividades...');
    // An√°lisis II requiere An√°lisis I
    const analisisI = materiasCreadas.find(m => m.nombre === 'An√°lisis Matem√°tico I');
    const analisisII = materiasCreadas.find(m => m.nombre === 'An√°lisis Matem√°tico II');
    if (analisisI && analisisII) {
      await dataSource.query(`
        INSERT INTO "correlativas_cursada" ("materiaId", "correlativaId")
        VALUES ($1, $2)
      `, [analisisII.id, analisisI.id]);
    }

    // POO requiere Algoritmos
    const algoritmos = materiasCreadas.find(m => m.nombre === 'Algoritmos y Estructuras de Datos');
    const poo = materiasCreadas.find(m => m.nombre === 'Programaci√≥n Orientada a Objetos');
    if (algoritmos && poo) {
      await dataSource.query(`
        INSERT INTO "correlativas_cursada" ("materiaId", "correlativaId")
        VALUES ($1, $2)
      `, [poo.id, algoritmos.id]);
    }

    // Crear algunas inscripciones de ejemplo
    console.log('üìù Creando inscripciones de ejemplo...');
    const comisiones = await dataSource.query(`
      SELECT c.id, c."materiaId" 
      FROM "comision" c
      LIMIT 4
    `);

    for (const comision of comisiones) {
      await dataSource.query(`
        INSERT INTO "inscripcion" ("estudianteId", "materiaId", "comisionId", "fechaInscripcion")
        VALUES ($1, $2, $3, CURRENT_TIMESTAMP)
      `, [estudianteUser[0].id, comision.materiaId, comision.id]);
    }

    console.log('\n‚úÖ Seed completado exitosamente!');
    console.log('\nüìß Usuarios de prueba creados:');
    console.log('  Admin: admin@universidad.edu / password123');
    console.log('  Profesor: profesor@universidad.edu / password123');
    console.log('  Estudiante: estudiante@universidad.edu / password123');
    console.log('  Estudiantes adicionales: estudiante2-5@universidad.edu / password123');

  } catch (error) {
    console.error('‚ùå Error durante el seed:', error);
    throw error;
  } finally {
    await app.close();
  }
}

seed().catch(err => {
  console.error('Error fatal:', err);
  process.exit(1);
});
